/**
 * Configura√ß√£o de Debug para PetShop Baronesa
 * Controla logs e modo de desenvolvimento
 */

// ========================
// CONFIGURA√á√ÉO DE AMBIENTE
// ========================

// Definir modo debug globalmente
// true = desenvolvimento (logs ativos)
// false = produ√ß√£o (apenas erros)
window.DEBUG_MODE = true; // ALTERE PARA false EM PRODU√á√ÉO

// ========================
// CONFIGURA√á√ïES DE LOG
// ========================

// Configura√ß√µes espec√≠ficas por m√≥dulo
window.LOG_CONFIG = {
    // M√≥dulos que devem sempre logar (mesmo em produ√ß√£o)
    alwaysLog: [
        'SecurityError',
        'PaymentError', 
        'CriticalSystemError',
        'AuthenticationError'
    ],
    
    // M√≥dulos que podem ser silenciados em produ√ß√£o
    developmentOnly: [
        'ProductsService',
        'FilterDebug',
        'UIDebug',
        'CartDebug',
        'NavigationDebug'
    ],
    
    // N√≠vel de log por m√≥dulo (error, warn, info, debug)
    moduleLogLevels: {
        'ProductsService': 'info',
        'AuthService': 'warn',
        'CartService': 'info',
        'AdminPanel': 'debug',
        'Security': 'error'
    }
};

// ========================
// UTILIT√ÅRIOS DE DEBUG
// ========================

// Fun√ß√£o para habilitar debug via URL
function enableDebugFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('debug') === 'true') {
        window.DEBUG_MODE = true;
        sessionStorage.setItem('debug_enabled', 'true');
    }
    
    // Permitir debug via sessionStorage
    if (sessionStorage.getItem('debug_enabled') === 'true') {
        window.DEBUG_MODE = true;
    }
}

// Fun√ß√£o para debug manual via console
window.enableDebug = function() {
    window.DEBUG_MODE = true;
    sessionStorage.setItem('debug_enabled', 'true');
    if (window.Logger) {
        window.Logger.enableDebug();
        window.Logger.system('Debug', 'Modo debug ativado manualmente');
    }
    console.log('üêõ Modo debug ativado! Use window.disableDebug() para desativar.');
};

window.disableDebug = function() {
    window.DEBUG_MODE = false;
    sessionStorage.removeItem('debug_enabled');
    if (window.Logger) {
        window.Logger.setLevel('error');
        window.Logger.system('Debug', 'Modo debug desativado');
    }
    console.log('üîá Modo debug desativado.');
};

// Fun√ß√£o para ver logs de erro coletados
window.viewErrorLogs = function() {
    if (window.Logger) {
        const logs = window.Logger.getErrorLogs();
        if (logs.length > 0) {
            console.table(logs);
            return logs;
        } else {
            console.log('üìã Nenhum log de erro encontrado.');
            return [];
        }
    }
};

// Fun√ß√£o para limpar logs
window.clearLogs = function() {
    if (window.Logger) {
        window.Logger.clearErrorLogs();
        console.log('üßπ Logs limpos.');
    }
};

// ========================
// DETEC√á√ÉO AUTOM√ÅTICA DE AMBIENTE
// ========================

// Detectar ambiente automaticamente
function detectEnvironment() {
    const isLocalhost = window.location.hostname === 'localhost' || 
                       window.location.hostname === '127.0.0.1' ||
                       window.location.hostname === '' ||
                       window.location.protocol === 'file:';
    
    const isStaging = window.location.hostname.includes('staging') ||
                     window.location.hostname.includes('dev') ||
                     window.location.hostname.includes('test');
    
    const isProduction = window.location.hostname.includes('petshopbaronesa.com') ||
                        window.location.hostname.includes('baronesa.pet') ||
                        (!isLocalhost && !isStaging);
    
    return {
        isLocalhost,
        isStaging, 
        isProduction,
        environment: isProduction ? 'production' : isStaging ? 'staging' : 'development'
    };
}

// ========================
// INICIALIZA√á√ÉO
// ========================

(function() {
    // Detectar ambiente
    const env = detectEnvironment();
    
    // Configurar modo debug baseado no ambiente
    if (env.isProduction && !window.DEBUG_MODE) {
        window.DEBUG_MODE = false;
    } else if (env.isLocalhost || env.isStaging) {
        enableDebugFromURL();
    }
    
    // Log de inicializa√ß√£o (apenas em desenvolvimento)
    if (window.DEBUG_MODE) {
        console.log(`üèóÔ∏è Ambiente detectado: ${env.environment}`);
        console.log('üîß Comandos dispon√≠veis:');
        console.log('  - window.enableDebug() - Ativar logs');
        console.log('  - window.disableDebug() - Desativar logs'); 
        console.log('  - window.viewErrorLogs() - Ver logs de erro');
        console.log('  - window.clearLogs() - Limpar logs');
    }
    
    // Salvar configura√ß√µes globalmente
    window.ENV_CONFIG = env;
})();

// ========================
// CONFIGURA√á√ÉO PARA PRODU√á√ÉO
// ========================

// Se estiver em produ√ß√£o, remover logs de debug do console
if (!window.DEBUG_MODE) {
    // Manter apenas console.error e console.warn
    const originalError = console.error;
    const originalWarn = console.warn;
    
    console.log = function() {};
    console.info = function() {};
    console.debug = function() {};
    
    // Preservar error e warn originais
    console.error = originalError;
    console.warn = originalWarn;
}
